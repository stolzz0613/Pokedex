{"version":3,"sources":["assets/banner.png","assets/pokeball.png","components/Header.js","components/Form.js","components/Pokemon.js","components/List.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","className","src","banner","alt","Form","setPokemon","pkm","useState","busquedaPkm","setBusquedaPkm","obtenerPokemon","a","url","Axios","get","then","response","push","data","id","catch","err","console","log","type","placeholder","onChange","e","target","value","pokeball","width","onClick","Pokemon","sprite","name","number","pkmInfo","setPkmInfo","useEffect","sprites","front_default","getList","List","pokemon","map","App","page","setPage","results","document","querySelector","scrollIntoView","behavior","class","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.2fe5daa9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/banner.bdcd20f5.png\";","module.exports = __webpack_public_path__ + \"static/media/pokeball.71a54683.png\";","import React from 'react';\nimport banner from \"../assets/banner.png\"\n\nconst Header = () => {\n    return (\n        <div className=\" header text-center\">\n            <img\n                src={banner}\n                alt=\"banner\"\n                className=\"w-50 d-inline-block rounded\"\n            />\n            <p className=\" text-monospace font-weight-bold\">What Pokemon are you looking for?</p>\n        </div>\n    );\n}\n\nexport default Header;","import React, { useState } from 'react';\nimport pokeball from \"../assets/pokeball.png\"\nimport Axios from \"axios\";\n\nconst Form = ({ setPokemon }) => {\n    let pkm = []\n    const [busquedaPkm, setBusquedaPkm] = useState(\"\");\n\n    const obtenerPokemon = async () => {\n        const url = `https://pokeapi.co/api/v2/pokemon-species/${busquedaPkm}/`\n        await Axios.get(url)\n            .then(response => {\n                pkm = []\n                pkm.push({ url: `https://pokeapi.co/api/v2/pokemon-species/${response.data.id}/` })\n                setPokemon(pkm)\n            })\n            .catch(err => { console.log(err) })\n        console.log(pkm)\n    }\n\n    return (\n        <form className=\"form-row align-items-center\">\n            <div className=\"col-md-11\">\n                <input\n                    type=\"text\"\n                    className=\"form-control w-75 mx-auto \"\n                    placeholder=\"Ingrese el nombre del pokemÃ³n\"\n                    onChange={e => setBusquedaPkm(e.target.value)}\n                />\n            </div>\n            <div className=\"icon col-md-1 ml-md-n5\">\n                <img\n                    src={pokeball}\n                    width=\"70px\"\n                    alt=\"icon\"\n                    type=\"submit\"\n                    onClick={() => busquedaPkm ? obtenerPokemon() : null}\n                />\n            </div>\n        </form >\n    );\n}\n\nexport default Form;","import React, { useState, useEffect } from 'react';\nimport Axios from \"axios\"\n\nconst Pokemon = ({ pkm }) => {\n\n    const [pkmInfo, setPkmInfo] = useState({\n        sprite: \"\",\n        name: \"\",\n        number: \"\",\n    });\n \n    useEffect(() => {\n        const getList = async () => {\n            await Axios\n                .get(pkm.url)\n                .then(response => {\n                    Axios.get(`https://pokeapi.co/api/v2/pokemon/${response.data.id}/`)\n                        .then(response => {\n                            setPkmInfo({\n                                sprite: response.data.sprites.front_default,\n                                name: response.data.name,\n                                number: response.data.id\n                            })\n                        })\n                })\n                .catch(err => {\n                    console.log(err)\n                })\n        }\n        getList();\n    }, [pkm])\n\n\n    return (\n        <div className=\"col-md-3 mt-4 mx-auto\">\n            <div className=\"card\">\n                <img\n                    src={pkmInfo.sprite}\n                    className=\"card-img-top\"\n                    alt={pkm.name}\n                />\n                <div className=\"card-body\">\n                    <h5 className=\"card-title\">{pkmInfo.name}</h5>\n                    <p className=\"card-text\">\n                        {pkmInfo.number}\n                    </p>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default Pokemon;","import React from 'react';\nimport Pokemon from \"./Pokemon\";\n\nconst List = ({ pokemon }) => {\n    console.log(pokemon)\n    return (\n        <div className=\"row mt-5\">\n            {pokemon.map(pkm => (\n                <Pokemon\n                    pkm={pkm}\n                />\n            ))}\n        </div>\n    );\n}\n\nexport default List;","import React, { useState, useEffect } from 'react';\nimport Axios from \"axios\";\nimport Header from \"./components/Header\"\nimport Form from \"./components/Form\";\nimport List from \"./components/List\";\n\nfunction App() {\n\n  const [pokemon, setPokemon] = useState([]);\n  const [page, setPage] = useState(0);\n  const url = `https://pokeapi.co/api/v2/pokemon-species/?limit=20&offset=${page}`\n\n  useEffect(() => {\n    const getList = async () => {\n\n      await Axios\n        .get(url)\n        .then(response => {\n          setPokemon(response.data.results)\n        })\n        .catch(err => {\n          console.log(err)\n        })\n      const header = document.querySelector(\".header\");\n      header.scrollIntoView({ behavior: \"smooth\" })\n    }\n    getList();\n  }, [url])\n\n  return (\n    <div>\n      <Header />\n      <div className=\"container\">\n        <Form\n          setPokemon={setPokemon}\n        />\n      </div>\n      <div className=\"container mt-3\">\n        <List\n          pokemon={pokemon}\n        />\n      </div>\n      <div className=\"w-100 text-center mt-4\">\n        <button\n          type=\"button\"\n          class=\"btn btn-secondary mr-3\"\n          onClick={() => {\n            if (page === 0) return;\n            const number = page - 20;\n            setPokemon([])\n            setPage(number)\n            console.log(page)\n          }}\n        >&laquo; Atras</button>\n        <button\n          type=\"button\"\n          class=\"btn btn-secondary ml-3\"\n          onClick={() => {\n            const number = 20 + page;\n            setPokemon([])\n            setPage(number)\n            console.log(page)\n          }}\n        >Adelante &raquo;</button>\n      </div>\n    </div >\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}