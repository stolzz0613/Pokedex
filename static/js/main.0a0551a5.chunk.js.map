{"version":3,"sources":["assets/banner.png","assets/pokeball.png","components/Header.js","components/Form.js","components/Pokemon.js","components/List.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","className","src","banner","alt","Form","useState","setBusquedaPkm","type","placeholder","onChange","e","target","value","pokeball","width","onClick","console","log","Pokemon","region","pkm","pkmSprite","setPkmSprite","useEffect","a","url","name","Axios","get","then","response","data","sprites","front_default","catch","err","getList","List","pokemon","map","key","App","setRegion","setPokemon","main_region","pokemon_species","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"sFAAAA,EAAOC,QAAU,IAA0B,oC,mBCA3CD,EAAOC,QAAU,IAA0B,sC,4MCgB5BC,EAbA,WACX,OACI,yBAAKC,UAAU,uBACX,yBACIC,IAAKC,IACLC,IAAI,SACJH,UAAU,gCAEd,uBAAGA,UAAU,oCAAb,uC,iBCsBGI,EA7BF,WAAO,IAAD,EAEuBC,mBAAS,IAFhC,mBAEKC,GAFL,WAIf,OACI,0BAAMN,UAAU,+BACZ,yBAAKA,UAAU,aACX,2BACIO,KAAK,OACLP,UAAU,6BACVQ,YAAY,mCACZC,SAAU,SAAAC,GAAC,OAAIJ,EAAeI,EAAEC,OAAOC,WAG/C,yBAAKZ,UAAU,0BACX,yBACIC,IAAKY,IACLC,MAAM,OACNX,IAAI,OACJI,KAAK,SACLQ,QAAS,WACLC,QAAQC,IAAI,eCgBrBC,EAtCC,SAAC,GAAoB,EAAlBC,OAAmB,IAAXC,EAAU,EAAVA,IAAU,EAECf,mBAAS,IAFV,mBAE1BgB,EAF0B,KAEfC,EAFe,KAoBjC,OAhBAC,qBAAU,YACO,uCAAG,4BAAAC,EAAA,6DACNC,EADM,4CACqCL,EAAIM,KADzC,cAENC,IACDC,IAAIH,GACJI,MAAK,SAAAC,GACFR,EAAaQ,EAASC,KAAKC,QAAQC,kBAEtCC,OAAM,SAAAC,GACHnB,QAAQC,IAAIkB,MARR,2CAAH,qDAWbC,KACD,CAAChB,EAAIM,OAIJ,yBAAK1B,UAAU,iBACX,yBAAKA,UAAU,QACX,yBACIC,IAAKoB,EACLrB,UAAU,eACVG,IAAKiB,EAAIM,OAEb,yBAAK1B,UAAU,aACX,uBAAGA,UAAU,aACRoB,EAAIM,UCddW,EAhBF,SAAC,GAAyB,IAAvBlB,EAAsB,EAAtBA,OAAQmB,EAAc,EAAdA,QAEpB,OACI,yBAAKtC,UAAU,YACVsC,EAAQC,KAAI,SAAAnB,GAAG,OACZ,kBAAC,EAAD,CACID,OAAQA,EACRC,IAAKA,EACLoB,IAAKpB,EAAIM,YCgCde,MArCf,WAAgB,IAAD,EAEepC,mBAAS,IAFxB,mBAENc,EAFM,KAEEuB,EAFF,OAGiBrC,mBAAS,IAH1B,mBAGNiC,EAHM,KAGGK,EAHH,KAqBb,OAhBApB,qBAAU,YACK,uCAAG,sBAAAC,EAAA,+GAERG,IACHC,IAHW,2CAIXC,MAAK,SAAAC,GACJY,EAAUZ,EAASC,KAAKa,YAAYlB,MACpCiB,EAAWb,EAASC,KAAKc,oBAE1BX,OAAM,SAAAC,GACLnB,QAAQC,IAAIkB,MATF,2CAAH,qDAYbC,KACC,IAGD,6BACE,kBAAC,EAAD,MACA,yBAAKpC,UAAU,aACb,kBAAC,EAAD,OAEF,yBAAKA,UAAU,kBACb,kBAAC,EAAD,CACEmB,OAAQA,EACRmB,QAASA,OCxBCQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB7B,MAAK,SAAA8B,GACJA,EAAaC,gBAEd1B,OAAM,SAAA2B,GACL7C,QAAQ6C,MAAMA,EAAMC,c","file":"static/js/main.0a0551a5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/banner.bdcd20f5.png\";","module.exports = __webpack_public_path__ + \"static/media/pokeball.71a54683.png\";","import React from 'react';\nimport banner from \"../assets/banner.png\"\n\nconst Header = () => {\n    return (\n        <div className=\" header text-center\">\n            <img\n                src={banner}\n                alt=\"banner\"\n                className=\"w-50 d-inline-block rounded\"\n            />\n            <p className=\" text-monospace font-weight-bold\">What Pokemon are you looking for?</p>\n        </div>\n    );\n}\n\nexport default Header;","import React, { useState } from 'react';\nimport pokeball from \"../assets/pokeball.png\"\n\n\nconst Form = () => {\n\n    const [busquedaPkm, setBusquedaPkm] = useState(\"\");\n\n    return (\n        <form className=\"form-row align-items-center\">\n            <div className=\"col-md-11\">\n                <input\n                    type=\"text\"\n                    className=\"form-control w-75 mx-auto \"\n                    placeholder=\"Ingrese el nombre del pokemÃ³n\"\n                    onChange={e => setBusquedaPkm(e.target.value)}\n                />\n            </div>\n            <div className=\"icon col-md-1 ml-md-n5\">\n                <img\n                    src={pokeball}\n                    width=\"70px\"\n                    alt=\"icon\"\n                    type=\"submit\"\n                    onClick={() => {\n                        console.log(\"click\")\n                    }}\n                />\n            </div>\n        </form >\n    );\n}\n\nexport default Form;","import React, { useState, useEffect } from 'react';\nimport Axios from \"axios\"\n\nconst Pokemon = ({ region, pkm }) => {\n\n    const [pkmSprite, setPkmSprite] = useState(\"\")\n\n    useEffect(() => {\n        const getList = async () => {\n            const url = `https://pokeapi.co/api/v2/pokemon/${pkm.name}/`\n            await Axios\n                .get(url)\n                .then(response => {\n                    setPkmSprite(response.data.sprites.front_default)\n                })\n                .catch(err => {\n                    console.log(err)\n                })\n        }\n        getList();\n    }, [pkm.name])\n   \n\n    return (\n        <div className=\"col-md-3 mt-4\">\n            <div className=\"card\">\n                <img\n                    src={pkmSprite}\n                    className=\"card-img-top\"\n                    alt={pkm.name}\n                />\n                <div className=\"card-body\">\n                    <p className=\"card-text\">\n                        {pkm.name}\n                    </p>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default Pokemon;","import React from 'react';\nimport Pokemon from \"./Pokemon\";\n\nconst List = ({ region, pokemon }) => {\n\n    return (\n        <div className=\"row mt-5\">\n            {pokemon.map(pkm => (\n                <Pokemon\n                    region={region}\n                    pkm={pkm}\n                    key={pkm.name}\n                />\n            ))}\n\n        </div>\n    );\n}\n\nexport default List;","import React, { useState, useEffect } from 'react';\nimport Axios from \"axios\";\nimport Header from \"./components/Header\"\nimport Form from \"./components/Form\";\nimport List from \"./components/List\";\n\nfunction App() {\n\n  const [region, setRegion] = useState(\"\");\n  const [pokemon, setPokemon] = useState([]);\n\n  useEffect(() => {\n    const getList = async () => {\n      const url = `https://pokeapi.co/api/v2/generation/2/`\n      await Axios\n        .get(url)\n        .then(response => {\n          setRegion(response.data.main_region.name)\n          setPokemon(response.data.pokemon_species)\n        })\n        .catch(err => {\n          console.log(err)\n        })\n    }\n    getList();\n  }, [])\n\n  return (\n    <div>\n      <Header />\n      <div className=\"container\">\n        <Form />\n      </div>\n      <div className=\"container mt-3\">\n        <List\n          region={region}\n          pokemon={pokemon}\n        />\n      </div>\n    </div >\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}